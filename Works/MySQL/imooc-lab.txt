where语句进行条件查询
	条件表达式
		对记录进行过滤，如果没有指定WHERE子句，则显示所有记录
		在WHERE表达式中，可以使用MySQL支持的函数或运算符
group by 语句对查询结果分组
	查询结果分组
		[GROUP BY {col_name | position} [ASC | DESC],...]
			SELECT sex FROM users GROUP BY sex; 
having语句设置分组条件
	分组条件
		[HAVING where_condition]
			SELECT sex,age FROM users GROUP BY sex HAVING age>35;	//分组条件必须出现在前面
			SELECT sex FROM users GROUP BY sex HAVING count(id) >= 2;//或者是聚合函数
order by语句对查询结构排序
	对查询结果进行排序
		[ORDER BY {col_name | expr | postion} [ASC | DESC],...]
			SELECT * FROM users ORDER BY id DESC;
			SELECT * FROM users ORDER BY age,id DESC;
limit语句限制查询数量
	限制查询结果返回的数量
		[LIMIT {[offset,] row_count | row_count OFFSET offset}]
			SELECT * FROM users LIMIT 2;
			SELECT * FROM users LIMIT 3,2; //排列序号是在表中的次序

小结	
	

第五章 子查询与连接
数据准备
	SET NAMES gbk;在客户端显示中文
子查询简介
	子查询
		子查询Subquery是指出现在其他SQL语句内的SELECT子句。
		例如：
			SELECT * FROM t1 WHERE col1=(SELECT cal2 FROM t2);
			其中SELECT * FROM t1,称为Outer Query/ Outer Statement
			SELECT col2 FROM t2，称为SubQuery
		子查询指嵌套在查询内部，且必须始终出现在圆括号内
		自查徐你可以包含多个关键字或条件
			如DISTINCT , GROUP BY, ORDER BY,LIMIT,函数等
		子查询的外层查询可以是：SELECT，INSERT，UPDATE，SET或DO。
	子查询返回值
		子查询可以返回标量、一行、一列或子查询
有比较运算符引发的子查询
	使用比较运算符的子查询
		=,>,<,>=,<=,<>,!=,<=>
	语法结构
		operand comparison_operator subquery
		
		SELECT AVG(goods_price) FROM tdb_goods;
		SELECT ROUND(AVG(goods_price).2) FROM tdb_goods;
		SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price >=5636.36;
		SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price >=(SELECT ROUND(AVG(goods_price).2) FROM tdb_goods); 
		SELECT goods_price FROM tdb_goods WHERE goods_cate = '超极本';
	用ANY、SOME或者ALL修饰的比较运算符
		operand comparison_operator ANY(subquery)
		operand comparison_operator SOME (subquery)
		operand comparison_operator ALL (subquery)
		如果子查询返回多个结果时可以使用修饰
		ANY和SOME等价  
	
用[NOT] IN/EXISTS引发的子查询
	语法结构
		operand comparison_operator [NOT] IN (subquery)
		=ANY 运算符与IN等效
		!=ALL或<>ALL运算符与NOT IN等效
使用[NOT] EXISTS的子查询
	如果子查询返回任何行，EXISTS将返回TRUE；否则为FALSE。

使用INSERT...SELECT插入记录
	CREATE TABLE IF NOT EXISTS tdb_goods_cates(
		cate_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
		cate_name VARCHAR(40) NOT NULL
	);
	
	SELECT goods_cate FROM tdb_goods GROUP BY goods_cate;
	
	INSERT...SELECT
		将查询结果写入数据表
		INSERT[INTO] tbl_name [(col_name,...)]
		SELECT...
	
		DESC tdb_goods_cates;查看表结构
		INSERT tdb_goods_cates(cate_name) SELECT goods_cate FROM tdb_goods GROUP BY goods_cate;

多表更新
	UPDATE table_references
	SET col_name1={expr1|DEFAULT}
	[,col_name2={expr2|DEFAULT}]...
	[WHERE where_condition]
		
		UPDATE tdb_goods INNER JOIN tdb_goods_cates ON goods_cate = cate_name SET goods_cate = cate_id;

多表更新至一步到位
	CREATE...SELECT
	创建数据表同时将查询结果写入到数据表
	CREATE TABLE [IF NOT EXISTS] tbl_name
	[(create_definition,...)]
	select_statement 
	
	CREATE TABLE tdb_goods_brands
	(
		brand_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
		brand_name VARCHAR(40) NOT NULL
	)
	SELECT brand_name FROM tdb_goods GROUP BY brand_name;
	UPDATE tdb_goods AS g INNER JOIN tdb_goods_brands AS b ON g.brand_name = b.brand_name SET g.brand_name = b.brand_id;
	ALTER TABLE tdb_goods
		CHANGE goods_cate cate_id SMALLINT UNSIGNED NOT NULL
		CHANGE brand_name brand_id SMALLINT UNSIGNED NOT NULL;	

	这里采用的是虚拟外键或叫逻辑外键，而没有使用物理外键，一般都是使用的虚拟外键，在使用虚拟外键时要注意，如果加入的新记录的外键字段没有再参考外键中出现时，虚拟外键时不会报错的，而物理外键时会报错的。
	
	此时我们是为了减少数据库中的冗余信息，所以使用了内连接，但是在将信息呈现给用户的时候，我们需要让用户能够直接看到对应的信息，而不是使用编号，所以这是就需要我们使用连接。

	
连接的语法结构
	连接
		MySQL在SELECT语句、多表更新、多表删除语句中支持JOIN操作
	语法结构
	table_reference
	{[INNER | CROSS] JOIN | {LEFT| RIGHT} [OUTER] JOIN}
	table_reference
	ON conditional_expr
	
	数据表参照
	table_reference
	tbl_name[[AS] alias] | table_subquery [AS] alias
	数据表可以使用tbl_name AS alias_name
		或tbl_name alias_name 赋予别名
	table_subquery可以作为子查询使用在FROM子句中，
		这样的子查询必须为其赋予别名

内连接INNER JOIN
	连接类型
		INNER JOIN ,内连接
			在MySQL中，JOIN，CROSS JOIN和INNER JOIN是等价的。
		LEFT[OUTER] JOIN,左外连接
		RIGHT [OUTER] JOIN，右外连接
	连接条件
		使用ON关键字来设定连接条件，也可以使用WHERE来代替。
		通常使用ON关键字来设定连接条件，
		使用WHERE关键字进行结果集记录的过滤
	内连接
		显示左表及右表符合连接条件的记录

外连接OUTER JOIN
	左外连接
		显示左表的全部记录及右表符合连接条件的记录
	右外连接
		显示右表的全部记录及左表符合连接条件的记录 

多表连接
	SELECT goods_id,goods_name,cate_name.brand_name,goods_price FROM tdb_goods AS g
	INNER JOIN tdb_goods_cates AS c ON g.cate_id = c.cate_id
	INNER JOIN tdb_goods_brands AS b ON g.brand_id = b.brand_id;


关于连接的几点说明
	外连接
 	A LEFT JOIN B join_condition
	数据表B的结果集依赖数据表A
	数据表A的结果集根据做链接条件依赖所有数据表（B表除外）
	左外连接条件决定如何检索数据表B（在没有指定WHERE条件的情况下）
	如果数据表A的某条记录符合WHERE条件，但是在数据表B不存在符合连接条件的记录，将生成一个所有列为空的额外的B行
	如果使用内连接查找的记录在连接数据表中不存在，并且在WHERE子句中尝试一下操作：col_name IS NULL时，如果col_name被定义为NOT NULL，MySQL将在找到符合连接条件的记录后停止搜索更多的行

无限级分类表设计
	自身连接
		同一个数据表对其自身进行连接
	SELECT s.type_id,s.type_name,p.type_name FROM tdb_goods_types AS s LEFT JOIN tdb_goods_types AS p
	ON s.parent_id = p.type_id; 

多表删除
	DELETE tbl_name[.*][,tbl_name[.*]]...
	FROM table_references
	[WHERE where_condition]
	
	SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) >=2;
	DELETE t1 FROM tdb_goods AS t1 LEFT JOIN (SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) >=2) AS t2 ON t1.goods_name = t2.goods_name WHERE t1.goods_id > t2.goods_id;
	
第六章 运算符和函数
字符函数
	CONCAT() 字符连接
		SELECT CONCAT(first_name,last_name) AS fullname FROM test;
	CONCAT_WS() 使用指定的分隔符进行字符连接
		SELECT CONCAT_WS('|','A','B','C');
	FORMAT() 数字格式化
	 	SELECT FORMAT(12560.75,2);
	LOWER() 转化为小写
	UPPER()转换为大写
	LEFT()获取左侧字符
	RIGHT()获取右侧字符
	LENGTH()获取字符串长度
	LTRIM()删除前导空格
	RTRIM()删除后导空格
	TRIM()删除所有前导或后导空格或特定字符 
		SELECT TRIM(LEADING '?' FROM '??MySQL???');
		SELECT TRIM(TRAILING '?' FROM '??MySQL???');
		SELECT TRIM(BOTH '?' FROM '??MySQL???');
	REPLACE()替换字符
		SELECT REPLACE('??My??SQL???','?','');
	SUBSTRING()截取字符串
		SELECT SUBSTRING('MySQL',1,2);
	[NOT] LIKE模式匹配
		SELECT  'MySQL' LIKE 'M%';任意零个或多个字符
		SELECT * FROM test WHERE first_name LIKE '%1%%' ESCAPE '1';
		_表示任意一个字符

数值运算符和函数
	CEIL()向上取整
	FLOOR()向下取整
	DIV()整数除法
	MOD取摸
	POWER()幂运算
	ROUND()四舍五入
	TRUNCATE()数字截取

比较运算符和函数
	[NOT] BETWEEN ... AND ...[不]在范围
	[NOT] IN()[不]在列出值范围内
	IS [NOT] NULL	[不]为空

日期时间函数
	NOW()
	CURDATE()
	CURTIME()
	DATE_ADD()日期变化
		SELECT DATE_ADD('2014-3-12',INTERVAL 365 DAY);
		SELECT DATE_ADD('2014-3-12',INTERVAL -365 DAY);
	DATEDIFF()
	DATE_FORMAT()

信息函数
	CONNECTION_ID()连接ID
	DATEBASE()当前打开的数据库
	LAST_INSERT_ID()最后插入记录的ID号，一定要有自动变化的字段
	USER()
	VERSION()

聚合函数
	AVG()平均值
	COUNT()计数
	MAX()
	MIN()
	SUM()
	
加密函数
	MD5()信息摘要算法
	PASSWORD()密码计算  

第七章 自定义函数
自定义函数简介
	自定义函数
	用户自定义函数user-defined function ,UDF是一种对MySQL扩展的途径，其用法与内置函数相同
	参数
	返回值
	函数可以返回任意类型的值，同样可以接受这些类型的参数
	参数数量不能超过1024
	创建函数
	CREATE FUNCTION function_name 
	RETURNS
	{STRING|INTEGER|REAL|DECIMAL}
	routine_body
	函数体有合法的SQL语句构成
	函数体可以是简单的SELECT或INSERT语句
	函数体如果为符合结构则使用BEGIN...END语句；
	复合结构可以包含声明，循环，控制结构 

创建不带参数的自定义函数
	CREATE FUNCTION f1() RETURNS VARCHAR(30)
	 	RETURN DATE_FORMAT( NOW(),'%Y年%m月%d日');

创建带有参数的自定义函数
	CREATE FUNCTION f2(num1 SMALLINT UNSIGNED,new2 SMALLINT UNSIGNED )
	RETURNS FLOAT(10,2) UNSIGNED
	RETURN(num1+num2)/2;

创建具有符合结构函数体的自定义函数	
	DELIMITER // 在后面的操作中使用//作为终结符
	超过一条语句需要执行时需要加上BEGIN...END来定义为聚合体
		CREATE FUNCTION adduser(username VARCHAR(20))
		RETURNS INT UNSIGNED
		BEGIN
		INSERT test(username) VALUES(nusername);
		RETURN LAST_INSERT_ID();
		END
		//

第八章 存储过程
存储过程简介
	SQL命令->MySQL引擎--分析-->语法正确->可识别命令--执行-->执行结果--返回-->客户端
	可以去掉语法分析和编译的环节
	存储过程：是SQL语句和控制语句的预编译集合，以一个名称存储并作为一个单元处理
	存储过程的优点
		增强SQL语句的功能和灵活性
		实现较快的执行速度
		减少网络流量

存储过程语法结构解析
	CREATE
	[DEFINER = {user | CURRENT_USER}]
	PROCEDURE sp_name ([proc_parameter[,...]])
	[characteristic ...] routine_body

	proc_parameter:
	[IN|OUT|INOUT] param_name type
	其中
		IN表示该参数的值必须在调用存储过程时指定
		OUT表示该参数的值可以被存储过程改变，并且可以返回
		INOUT表示该参数在调用时指定，并且可以被改变和返回

创建不带参数的存储过程
	CREATE PROCEDURE spl() SELECT VERSION();
	调用存储过程
		CALL sp_name([parameter[,...]])
		CALL sp_name[()]

创建带有IN类型参数的存储过程
	DELIMITER //
	CREATE PROCEDURE removeUserById(IN p_id INT UNSIGNED)
	BEGIN
	DELETE FROM users WHERE id=p_id;
	END
	//
	DELIMITER ;
	修改存储过程
	ALTER PROCEDURE sp_name [characteristic ...]
	COMMENT'string'
	|{CONTAINS SQL | NO SQL|READS SQL DATA | MODIFIES SQL DATA}
	|SQL SECURITY {DEFINER|INVOKER}
	删除存储过程
	DROP PROCEDURE [IF EXISTS] sp_name

创建带有IN和OUT类型参数的存储过程
	CREATE PROCEDURE removeUserAndREturnUserNums(IN p_id INT UNSIGNED,OUT userNums INT UNSIGNED)
	BEGIN
	DELETE FROM users WHERE id=p_id;
	SELECT count(id) FROM users INTO userNums;
	END
	//
	
	CALL removeUserAndReturnUserNums(29,@nums);
	SELECT @nums;

创建带有多个OUT类型参数的存储过程
	ROW_COUNT();得到最近插入、删除或者更新的记录总数

存储过程与自定义函数的区别
	存储过程实现的功能要复杂一些，而函数的针对性更强，函数很少对表操作，而存储过程经常对表操作
	存储过程可以返回多个值，而函数只能有一个返回值
	存储过程一般独立执行，而函数可以作为其他SQL语句的组成部分来出现
	
第九章 存储引擎
存储引擎简介
	MySQL可以将数据以不同的技术存储在文件（内存）中，这种技术就是存储引擎
	每一种存储引擎使用不同的存储机制、索引技巧、锁定水平、最终提供广泛且不同的功能。
	存储引擎也叫表类型
	MyISAM
	InnoDB
	Memory
	CSV
	Archive

相关知识点值并发处理
	并发控制
		当多个连接对记录进行修改时保证数据的一致性和完整性
	锁
		共享锁（读锁）:在同一时间段内，多个用户可以读取同一个资源，在读取过程中数据不会发生任何变化

		排它锁（写锁）:在任何时候只能有一个用户写入资源，当进行写锁时会阻塞其他的读锁或者写锁操作

	锁颗粒
		表锁：是一种开销最小的锁策略，一张表只要一个锁
		行锁：是一种开销最大的所策略，每个记录都可能要一个锁

之事务处理
	事务
		事务用于保证数据库的完整性
	事务的特征
		原子性Atomicity
		一致性Consistency
		隔离性Isolation
		持久性Durability

之外键和索引
	外键：是保证数据一致性的策略
	索引：是对数据表中一列或多列的值进行排序的一种结构

各个存储引擎特点
	特点	MyISAM	InnoDB	Memory	Archive
	存储限制 256TB	64TB	有	无
	事务安全	支持
	支持索引支持	支持	支持	
	锁颗粒	表锁	行锁	表锁	行锁
	数据压缩支持
	支持外键	支持

	索引：普通索引、唯一索引、全文索引、btree索引、hash索引...

设置存储引擎
	修改存储引擎的方法
		通过修改MySQL配置文件实现
			default-storage-engine=engine
		通过创建数据表命令实现
			CREATE TABLE table_name(
			...
			...
			)EBGINE = engine;
		通过修改数据表命令实现
			ALTER TABLE table_name ENGINE [=] engine_name;

第十章 MySQL图形化管理工具
图形管理工具值phpMyAdmin


之Navicat for MySQL


之MySQL Workbench













