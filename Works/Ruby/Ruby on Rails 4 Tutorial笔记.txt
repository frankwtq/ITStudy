Ruby on Rails4 Tutorial笔记

第一章 从零到部署
1.2 搭建环境
	IDE：RubyMine
	1.2.2安装Ruby，RubyGems，Rails和Git
		gem update --system 2.0.0
		gem install rails --version 4.0.0 --no-ri --no-rdoc
		Rails 4.0.0
		代码1.5：指定gem功能的Gemfile文件
		bundle update	
		bundle install
1.3 用git做版本控制
	git config --global user.name "Your Name"
	git config --global user.email your.email@example.com
	代码1.7 加强版。gitignore文件
	
	git checkout -f
		-f覆盖当前改动
	git remote add origin https://github.com/mhartl/first_app.git	
	git push -u origin master
	分支
	git checkout -b modify-README
	git commit -a -m "Improve the README file"
	合并
	git checkout master
	git merge modify-README
	git branch -d modify-README

	git checkout -b

 topic-branch
$ <really screw up the branch>
$ git add .
$ git commit -a -m "Major screw up"
$ git checkout master
$ git branch -D topic-branch

-D即使还没有合并，也会删除分支
推送
git push
1.4 部署

第三章 基本静态页面
rails new sample_app --skip-test-unit
使用代码3.1编辑Gemfile

安装和包含新gem
$ bundle install --without production
$ bundle update
$ bundle install

让Rails使用RSpec而不用Test：：Unit
rails generate rspec:install

初始化Git
$ git init
$ git add .
$ git commit -m "Initial commit"

$ git mv README.rdoc README.md
$ git commit -am "Improve the README"

$ git remote add origin https://github.com/<username>/sample_app.git
$ git push -u origin master

3.1静态页面
新建分支
git checkout -b static-pages

生成StaticPages控制器
rails generate controller StaticPages home help --no-test-framework

静态页面：
	控制器：StaticPages
	动作：home;help

可以撤销这个操作：
rails generate controller FooBars baz quux
rails destroy controller FooBars baz quux

为home生成视图
app/views/static_pages/home.html.erb
<h1>StaticPages#home</h1>
<p>Find me in app/views/static_pages/home.html.erb</p>

为help生成视图
app/views/static_pages/help.html.erb
<h1>StaticPages#help</h1>
<p>Find me in app/views/static_pages/help.html.erb</p>

$ git add .
$ git commit -m "Add a StaticPages controller"

3.2第一个测试
为静态页面生成继承测试request spec
rails generate integration_test static_pages

测试home内容的代码
spec/requests/static_pages_spec.rb
require 'spec_helper'
describe "Static pages" do
describe "Home page" do
it "should have the content 'Sample App'" do
visit '/static_pages/home'
expect(page).to have_content('Sample App')
end
end
end

把CapybaraDSL加入RSpec帮助文件
spec/spec_helper.rb
# This file is copied to spec/ when you run 'rails generate rspec:install'
..
RSpec.configure do |config|
...
config.include Capybara::DSL
end

bundle exec rspec spec/requests/static_pages_spec.rb



Capybara


创建了home和help动作，完成了对应页面的简单测试
现在来加入点动态内容

3.3有点动态内容的页面
	使用了layout布局文件app/views/layout/application.rb来消除home和help的重复部分

5完善布局
	之前的布局太简单，我们需要加上一些结构，会使用bootstrap

5.1.1加入网站导航
bootstrap
sass和asset pipeline

5.3.1路由测试
完成地址到具名路由的转换

5.3.4简化RSpec测试代码
新建spec/support文件，创建RSpec通用函数utilities.rb来保存full_title方法
RSpec会自动加载spec/support目录中的文件
使用了subject {page};before {visit root_path};it {should have_content(‘’)}

5.4 用户注册第一步
	创建Users控制器
5.4.2 注册页面的URL地址
	把/users/new映射到/signup
	先编写集成测试
	使测试通过

6 用户模型
6.1 User模型
6.1.1 数据库迁移，创建数据结构
	生成用户模型
	执行迁移
6.1.3 在沙河模式中创建，查询，更新用户对象
	user = User.new(name: "Michael Hartl", email: "mhartl@example.com")
user.save
User.create(name: "A Nother", email: "another@example.org")
foo.destroy
User.find(1)
User.find_by_email("mhartl@example.com")
User.find_by(email: "mhartl@example.com")
User.first
User.all
user.update_attributes(name: "The Dude", email: "dude@abides.org")
user.update_attribute(:name, "The Dude")
6.2 用户数据验证
6.2.1 用户模型测试
$ bundle exec rake db:migrate
$ bundle exec rake test:prepare	
	把开发数据库db/development.sqlite3中的数据模型复制到测试数据库db/test.sqlite3中
$ bundle exec rspec spec/models/user_spec.rb
6.2.2 验证存在性
user.valid?
user.errors.full_messages
6.2.3 长度验证
validates :name, presence:true, length: {maximum:50}
        validates :email, presence:true
邮箱格式验证
validates :name, presence:true, length: {maximum:50}
        VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
        validates :email, presence:true, format: { with: VALID_EMAIL_REGEX }
6.2.5 唯一性验证
测试
验证
validates :email, presence: true, format: { with: VALID_EMAIL_REGEX },
uniqueness: { case_sensitive: false }
唯一性验证的不足
不能应对并发，解决方法：在数据库层也加上唯一性限制
rails generate migration add_index_to_users_email
class AddIndexToUsersEmail < ActiveRecord::Migration
def change
add_index :users, :email, unique: true
end
end
bundle exec rake db:migrate

使用回调函数before_save在用户存入数据库之前强行把Email地址转换为小写字母形式，因为不是所有数据库适配器的索引都区分大小写。回调函数，在ActiveRecord对象生命周期的特定时刻调用。
app/models/user.rb
class User < ActiveRecord::Base
before_save { self.email = email.downcase }
. . .
end
6.3安全密码
数据库中存储着加密后的密码，所以要在users表中加入password_digest
这里要使用到gem 'bcrypt-ruby' , '3.0.1'
生成一个迁移文件
rails generate migration add_password_digest_to_users password_digest:string
bundle exec rake db:migrate
6.3.2确定密码
虽然在控制层可以实现，但是最好还是在模型层实现，
加入虚拟属性，password和password_confirmation，
都在has_secure_password函数里
6.3.3用户身份验证
使用authenticate方法验证用户的密码
7用户注册
7.1显示用户信息
加入调试信息
<%= debug(params) if Rails.env.development? %>
Rails定义了三个环节，分别是生产环境，开发环境和测试环境
7.1.2Users资源
REST框架把数据视为资源resource，可以创建，显示，更新和删除，分别对应了HTTP中的POST，GET，PATCH和DELETE
请求方法
resources :users 
7.1.13使用预构件测试用户资料页面














































